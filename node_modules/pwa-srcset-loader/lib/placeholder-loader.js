'use strict';

var _datauri = require('datauri');

var _datauri2 = _interopRequireDefault(_datauri);

var _imageSize = require('image-size');

var _imageSize2 = _interopRequireDefault(_imageSize);

var _getPixels = require('get-pixels');

var _getPixels2 = _interopRequireDefault(_getPixels);

var _util = require('./util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function bufferToDataUri(type, buffer) {
  return new _datauri2.default().format(type, buffer).content;
}

function getPixelsAsync(shrinkedImageBuffer, type) {
  return new Promise(function (resolve, reject) {
    (0, _getPixels2.default)(shrinkedImageBuffer, type, function (err, pixels) {
      if (err) {
        return reject(err);
      }

      return resolve([pixels.data[0], pixels.data[1], pixels.data[2], pixels.data[3]]);
    });
  });
}

function getColor(buffer, imageType) {
  var type = 'image/' + imageType;

  return (0, _util.resizeImage)(buffer, 2, 2).then(function (shrinkedImageBuffer) {
    return getPixelsAsync(shrinkedImageBuffer, type);
  }).then(function (c) {
    var color = [].concat(_toConsumableArray(c));
    color[3] = Math.round(color[3] / 255 * 1000) / 1000;
    return color;
  });
}

function createPlaceholder(content, options) {
  var width = options.size,
      lightweight = options.lightweight;


  var size = void 0;
  var placeholderUrl = void 0;
  return (0, _util.resizeImage)(content, width).then(function (resizedBuffer) {
    size = (0, _imageSize2.default)(resizedBuffer);
    var imageUrl = bufferToDataUri('.' + size.type, resizedBuffer);

    if (lightweight) {
      return imageUrl;
    }

    var blurredImage = '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 ' + size.width + ' ' + size.height + '">\n          <filter id="x">\n            <feGaussianBlur stdDeviation="1" />\n          </filter>\n          <image width="100%" height="100%" xlink:href="' + imageUrl + '" filter="url(#x)"/>\n        </svg>';
    return bufferToDataUri('.svg', Buffer.from(blurredImage, 'utf8'));
  }).then(function (url) {
    placeholderUrl = url;

    return getColor(content, size.type);
  }).then(function (color) {
    // Use the size of the unresized image to calculate the exact ratio
    var originalContentSize = (0, _imageSize2.default)(content);
    return {
      color: color,
      url: placeholderUrl,
      ratio: originalContentSize.width / originalContentSize.height
    };
  });
}

/**
 * Query: lightweight (bool), size (?number)
 */
module.exports = function placeholderLoader(content) {
  if (this.cacheable) {
    this.cacheable();
  }

  var callback = this.async();

  var options = (0, _util.parseQuery)(this.query);

  options.size = Number(options.size);
  if (!options.size || Number.isNaN(options.size)) {
    options.size = 20;
  }

  createPlaceholder(content, options).then(function (placeholder) {
    callback(null, 'module.exports = ' + JSON.stringify(placeholder));
  }, callback);
};

module.exports.raw = true;